/**
 * UpUsuario.java
 * Esta clase representa la interfaz de usuario para registrar usuarios en el sistema.
 * Proporciona campos y controles para ingresar y validar la información de un usuario, y permite
 * registar la información de los campos en la base de datos.
 * Este archivo es parte del paquete "com.views".
 *
 * Este archivo es parte de InversionesRT.
 *
 * InversionesRT es software libre: puedes redistribuirlo y/o modificarlo
 * bajo los términos de la Licencia Pública General GNU publicada por
 * la Free Software Foundation, ya sea la versión 3 de la Licencia, o
 * (a su elección) cualquier versión posterior.
 *
 * InversionesRT se distribuye con la esperanza de que sea útil,
 * pero SIN NINGUNA GARANTÍA; incluso sin la garantía implícita de
 * COMERCIABILIDAD o APTITUD PARA UN PROPÓSITO PARTICULAR. Consulta la
 * Licencia Pública General GNU para más detalles.
 *
 * Deberías haber recibido una copia de la Licencia Pública General GNU
 * junto con [nombre del proyecto]. En caso contrario, consulta
 * <https://www.gnu.org/licenses/gpl-3.0.html>.
 */
package com.views;

import java.awt.Color;
import com.clase.bd.Conexion;
import java.sql.Connection;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;

public class UpUsuario extends javax.swing.JPanel {

    public UpUsuario() {
        initComponents();
        initStyles();
    }

    private void initStyles() {
        // Tipografía para los títulos de los campos.
        tituloRegistrar.putClientProperty("FlatLaf.styleClass", "h1");
        tituloRegistrar.setForeground(new java.awt.Color(90, 58, 201));

        tituloCedula.putClientProperty("FlatLaf.styleClass", "h3");
        tituloCedula.setForeground(Color.DARK_GRAY);

        tituloNombre.putClientProperty("FlatLaf.styleClass", "h3");
        tituloNombre.setForeground(Color.DARK_GRAY);

        tituloApellido.putClientProperty("FlatLaf.styleClass", "h3");
        tituloApellido.setForeground(Color.DARK_GRAY);

        tituloUsername.putClientProperty("FlatLaf.styleClass", "h3");
        tituloUsername.setForeground(Color.DARK_GRAY);

        tituloPassword.putClientProperty("FlatLaf.styleClass", "h3");
        tituloPassword.setForeground(Color.DARK_GRAY);

        tituloCorreo.putClientProperty("FlatLaf.styleClass", "h3");
        tituloCorreo.setForeground(Color.DARK_GRAY);

        tituloTelefono.putClientProperty("FlatLaf.styleClass", "h3");
        tituloTelefono.setForeground(Color.DARK_GRAY);

        tituloEstatus.putClientProperty("FlatLaf.styleClass", "h3");
        tituloEstatus.setForeground(Color.DARK_GRAY);

        tituloPermisos.putClientProperty("FlatLaf.styleClass", "h3");
        tituloPermisos.setForeground(Color.DARK_GRAY);

        // Texto dentro de los campos, indicando la información que se debe introducir.
        campoCedula.putClientProperty("JTextField.placeholderText", "Ingrese la cedula.");
        campoNombre.putClientProperty("JTextField.placeholderText", "Ingrese el nombre.");
        campoApellido.putClientProperty("JTextField.placeholderText", "Ingrese el apellido.");
        campoUsername.putClientProperty("JTextField.placeholderText", "Ingrese el username.");
        campoPassword.putClientProperty("JTextField.placeholderText", "Ingrese la contraseña.");
        campoCorreo.putClientProperty("JTextField.placeholderText", "Ingrese el correo.");
        campoTelefono.putClientProperty("JTextField.placeholderText", "Ingrese el teléfono.");

        // Propiedades de los ComboBox y botón (redondos).
        comboEstatus.putClientProperty("JComponent.roundRect", true);
        comboEstatus.putClientProperty("FlatLaf.style", "large");
        comboPermisos.putClientProperty("JComponent.roundRect", true);
        comboPermisos.putClientProperty("FlatLaf.style", "large");

        botonRegistrar.putClientProperty("JButton.buttonType", "roundRect");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        background = new javax.swing.JPanel();
        tituloRegistrar = new javax.swing.JLabel();
        tituloCedula = new javax.swing.JLabel();
        campoCedula = new javax.swing.JTextField();
        tituloNombre = new javax.swing.JLabel();
        campoNombre = new javax.swing.JTextField();
        tituloApellido = new javax.swing.JLabel();
        campoApellido = new javax.swing.JTextField();
        tituloUsername = new javax.swing.JLabel();
        campoUsername = new javax.swing.JTextField();
        tituloPassword = new javax.swing.JLabel();
        campoPassword = new javax.swing.JPasswordField();
        tituloCorreo = new javax.swing.JLabel();
        campoCorreo = new javax.swing.JTextField();
        tituloTelefono = new javax.swing.JLabel();
        campoTelefono = new javax.swing.JTextField();
        tituloEstatus = new javax.swing.JLabel();
        comboEstatus = new javax.swing.JComboBox<>();
        tituloPermisos = new javax.swing.JLabel();
        comboPermisos = new javax.swing.JComboBox<>();
        botonRegistrar = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();

        background.setBackground(new java.awt.Color(255, 255, 255));
        background.setForeground(new java.awt.Color(0, 0, 0));

        tituloRegistrar.setText("Registrar Usuario");

        tituloCedula.setText("Cedula");

        tituloNombre.setText("Nombre");

        tituloApellido.setText("Apellido");

        tituloUsername.setText("Username");

        tituloPassword.setText("Contraseña");

        tituloCorreo.setText("Correo");

        tituloTelefono.setText("Teléfono");

        tituloEstatus.setText("Estatus");

        comboEstatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecciona el estatus", "Activo", "Inactivo" }));
        comboEstatus.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        tituloPermisos.setText("Permisos de");

        comboPermisos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecciona el permiso", "Administrador", "Usuario" }));
        comboPermisos.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        botonRegistrar.setBackground(new java.awt.Color(90, 58, 201));
        botonRegistrar.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        botonRegistrar.setForeground(new java.awt.Color(255, 255, 255));
        botonRegistrar.setText("Registrar");
        botonRegistrar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        botonRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonRegistrarActionPerformed(evt);
            }
        });

        jSeparator1.setForeground(new java.awt.Color(204, 204, 204));
        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        javax.swing.GroupLayout backgroundLayout = new javax.swing.GroupLayout(background);
        background.setLayout(backgroundLayout);
        backgroundLayout.setHorizontalGroup(
            backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundLayout.createSequentialGroup()
                .addGap(292, 292, 292)
                .addComponent(botonRegistrar, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addGap(292, 292, 292))
            .addGroup(backgroundLayout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(backgroundLayout.createSequentialGroup()
                        .addComponent(tituloRegistrar)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(backgroundLayout.createSequentialGroup()
                        .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(backgroundLayout.createSequentialGroup()
                                .addComponent(tituloUsername, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(191, 191, 191))
                            .addGroup(backgroundLayout.createSequentialGroup()
                                .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(campoApellido, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(campoNombre, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(campoCedula, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(campoUsername, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGap(76, 76, 76))
                            .addGroup(backgroundLayout.createSequentialGroup()
                                .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(backgroundLayout.createSequentialGroup()
                                        .addComponent(tituloCedula, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(7, 7, 7))
                                    .addComponent(tituloNombre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(tituloApellido, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(200, 200, 200)))
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(76, 76, 76)
                        .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(backgroundLayout.createSequentialGroup()
                                .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(comboEstatus, 0, 1, Short.MAX_VALUE)
                                    .addGroup(backgroundLayout.createSequentialGroup()
                                        .addComponent(tituloEstatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(79, 79, 79)))
                                .addGap(30, 30, 30)
                                .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(backgroundLayout.createSequentialGroup()
                                        .addComponent(tituloPermisos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(151, 151, 151))
                                    .addGroup(backgroundLayout.createSequentialGroup()
                                        .addComponent(comboPermisos, 0, 1, Short.MAX_VALUE)
                                        .addGap(110, 110, 110))))
                            .addGroup(backgroundLayout.createSequentialGroup()
                                .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(backgroundLayout.createSequentialGroup()
                                        .addComponent(tituloCorreo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(134, 134, 134))
                                    .addComponent(campoPassword)
                                    .addComponent(campoCorreo)
                                    .addComponent(campoTelefono)
                                    .addGroup(backgroundLayout.createSequentialGroup()
                                        .addComponent(tituloTelefono, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(124, 124, 124)))
                                .addGap(191, 191, 191))
                            .addGroup(backgroundLayout.createSequentialGroup()
                                .addComponent(tituloPassword, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(301, 301, 301))))))
        );
        backgroundLayout.setVerticalGroup(
            backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(tituloRegistrar)
                .addGap(24, 24, 24)
                .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(backgroundLayout.createSequentialGroup()
                        .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tituloPassword)
                            .addComponent(tituloCedula))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(campoCedula, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(campoPassword, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(backgroundLayout.createSequentialGroup()
                                .addComponent(tituloNombre)
                                .addGap(12, 12, 12)
                                .addComponent(campoNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(tituloApellido)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(campoApellido, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(tituloUsername)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(campoUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(backgroundLayout.createSequentialGroup()
                                .addComponent(tituloCorreo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(campoCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(tituloTelefono)
                                .addGap(12, 12, 12)
                                .addComponent(campoTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(tituloEstatus, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tituloPermisos))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(backgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(comboEstatus, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(comboPermisos, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addGap(47, 47, 47)
                .addComponent(botonRegistrar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(57, 57, 57))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(background, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(background, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void botonRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonRegistrarActionPerformed
        // Declaración de variables.
        int estatus_cmb, permisos_cmb, validacion = 0;
        String cedula, nombre, apellido, username, contraseña, correo, telefono;

        // Recoge los datos introducidos en los campos.
        cedula = campoCedula.getText().trim();
        nombre = campoNombre.getText().trim();
        apellido = campoApellido.getText().trim();
        username = campoUsername.getText().trim();
        contraseña = campoPassword.getText().trim();
        correo = campoCorreo.getText().trim();
        telefono = campoTelefono.getText().trim();
        estatus_cmb = comboEstatus.getSelectedIndex() + 1;
        permisos_cmb = comboPermisos.getSelectedIndex() + 1;

        // Límites de caracteres.
        int maxCaracteresCedula = 8;
        int maxCaracteresNombre = 35;
        int maxCaracteresApellido = 35;
        int maxCaracteresUsername = 20;
        int maxCaracteresContraseña = 20;
        int maxCaracteresCorreo = 50;
        int maxCaracteresTelefono = 11;

        // Validación de campos vacíos
        if (cedula.equals("") || nombre.equals("") || apellido.equals("") || username.equals("")
                || contraseña.equals("") || correo.equals("") || telefono.equals("")) {
            JOptionPane.showMessageDialog(null, "Debes llenar todos los campos.", "Advertencia",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Validación de longitud de campos
        if (cedula.length() > maxCaracteresCedula || nombre.length() > maxCaracteresNombre
                || apellido.length() > maxCaracteresApellido || username.length() > maxCaracteresUsername
                || contraseña.length() > maxCaracteresContraseña || correo.length() > maxCaracteresCorreo
                || telefono.length() > maxCaracteresTelefono) {
            JOptionPane.showMessageDialog(null, "Se ha excedido el límite de caracteres en uno o más campos.",
                    "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        //Validación de los ComboBox para que recoja el String.
        String estatus = null;
        switch (estatus_cmb) {
            case 1:
                estatus = "";
                break;
            case 2:
                estatus = "Activo";
                break;
            case 3:
                estatus = "Inactivo";
                break;
            default:
                break;
        }

        String permisos_de = null;
        switch (permisos_cmb) {
            case 1:
                permisos_de = "";
                break;
            case 2:
                permisos_de = "Administrador";
                break;
            case 3:
                permisos_de = "Usuario";
                break;
            default:
                break;
        }

        if (estatus.equals("") && permisos_de.equals("")) {
            JOptionPane.showMessageDialog(null, "Debes seleccionar una opción de estatus y permisos.",
                    "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;

        } else if (estatus.equals("")) {
            JOptionPane.showMessageDialog(null, "Debes seleccionar una opción de estatus.",
                    "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;

        } else if (permisos_de.equals("")) {
            JOptionPane.showMessageDialog(null, "Debes seleccionar una opción de permisos.",
                    "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Validación de existencia de cédula, username, correo y teléfono.
        try {
            Connection cn = Conexion.conectar();
            PreparedStatement pst = cn.prepareStatement(
                    "SELECT cedula, username, correo, telefono FROM usuario WHERE cedula = ? OR username = ? OR correo = ? OR telefono = ?");
            pst.setString(1, cedula);
            pst.setString(2, username);
            pst.setString(3, correo);
            pst.setString(4, telefono);

            ResultSet rs = pst.executeQuery();

            List<String> existentValues = new ArrayList<>();

            int counter = 1;
            while (rs.next()) {
                if (rs.getString("cedula").equals(cedula)) {
                    existentValues.add(counter++ + ". La cédula de identidad se encuentra registrada.");
                }

                if (rs.getString("username").equals(username)) {
                    existentValues.add(counter++ + ". El username no se encuentra disponible.");
                }

                if (rs.getString("correo").equals(correo)) {
                    existentValues.add(counter++ + ". La dirección de correo electrónico ya está siendo usada.");
                }

                if (rs.getString("telefono").equals(telefono)) {
                    existentValues.add(counter++ + ". El número de teléfono se encuentra en uso.");
                }
            }

            if (!existentValues.isEmpty()) {
                String errorMessage = String.join("\n\n", existentValues);
                JOptionPane.showMessageDialog(null, errorMessage, "Información", JOptionPane.INFORMATION_MESSAGE);
                cn.close();
                return;
            }

            cn.close();

        } catch (SQLException e) {
            System.err.println("Error en validar la cédula, username, correo y teléfono." + e);
            JOptionPane.showMessageDialog(null, "¡Error al comparar la cédula, username, correo y teléfono! Póngase en "
                    + "contacto con el Administrador.", "Error", JOptionPane.ERROR_MESSAGE);
        }

        // Validación de longitud y caracteres especiales en la contraseña
        Pattern patternContraseña = Pattern.compile("^(?=.*[0-9])(?=.*[!@#$%^&*_])[a-zA-Z0-9!@#$%^&*_]+$");
        Matcher matcherContraseña = patternContraseña.matcher(contraseña);

        if (contraseña.length() < 8 || contraseña.length() > 20 || !matcherContraseña.matches()) {
            JOptionPane.showMessageDialog(null, "La contraseña debe tener entre 8 y 20 caracteres.\n"
                    + "\nEsta debe contener al menos un número y un carácter especial.", "Advertencia", 
                    JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Validación de formato de correo electrónico
        Pattern pattern = Pattern.compile("^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+\\.[A-Za-z]+$");
        Matcher matcher = pattern.matcher(correo);

        if (!matcher.matches()) {
            JOptionPane.showMessageDialog(null, "El formato del correo electrónico no es válido.",
                    "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Validación de formato de número de teléfono
        Pattern patternTelefono = Pattern.compile("^\\d{11}$");
        Matcher matcherTelefono = patternTelefono.matcher(telefono);

        if (!matcherTelefono.matches()) {
            JOptionPane.showMessageDialog(null, "El formato del número de teléfono no es válido.",
                    "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Insertación de datos en la BD y método para limpiar los campos.
        if (validacion == 0) {
            try {
                Connection cn6 = Conexion.conectar();
                PreparedStatement pst6 = cn6.prepareStatement(
                        "INSERT INTO usuario VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)");

                pst6.setString(1, cedula);
                pst6.setString(2, nombre);
                pst6.setString(3, apellido);
                pst6.setString(4, username);
                pst6.setString(5, contraseña);
                pst6.setString(6, correo);
                pst6.setString(7, telefono);
                pst6.setString(8, estatus);
                pst6.setString(9, permisos_de);

                pst6.executeUpdate();
                cn6.close();

                // Método para vaciar los campos.
                Limpiar();

                JOptionPane.showMessageDialog(null, "Se ha registrado el usuario con éxito.",
                        "Información", JOptionPane.INFORMATION_MESSAGE);

            } catch (SQLException e) {
                System.err.println("Error en registrar usuario" + e);
                JOptionPane.showMessageDialog(null, "¡Error al registrar usuario! Póngase en "
                        + "contacto con el Administrador.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            }

        }
    }//GEN-LAST:event_botonRegistrarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel background;
    private javax.swing.JButton botonRegistrar;
    private javax.swing.JTextField campoApellido;
    private javax.swing.JTextField campoCedula;
    private javax.swing.JTextField campoCorreo;
    private javax.swing.JTextField campoNombre;
    private javax.swing.JPasswordField campoPassword;
    private javax.swing.JTextField campoTelefono;
    private javax.swing.JTextField campoUsername;
    private javax.swing.JComboBox<String> comboEstatus;
    private javax.swing.JComboBox<String> comboPermisos;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel tituloApellido;
    private javax.swing.JLabel tituloCedula;
    private javax.swing.JLabel tituloCorreo;
    private javax.swing.JLabel tituloEstatus;
    private javax.swing.JLabel tituloNombre;
    private javax.swing.JLabel tituloPassword;
    private javax.swing.JLabel tituloPermisos;
    private javax.swing.JLabel tituloRegistrar;
    private javax.swing.JLabel tituloTelefono;
    private javax.swing.JLabel tituloUsername;
    // End of variables declaration//GEN-END:variables

    // Vacia los campos una vez registrado el usuario.
    public void Limpiar() {
        campoCedula.setText("");
        campoNombre.setText("");
        campoApellido.setText("");
        campoUsername.setText("");
        campoPassword.setText("");
        campoCorreo.setText("");
        campoTelefono.setText("");
        comboEstatus.setSelectedIndex(0);
        comboPermisos.setSelectedIndex(0);
    }
}
